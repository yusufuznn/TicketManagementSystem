// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicketSystem.API;

#nullable disable

namespace TicketSystem.API.Migrations
{
    [DbContext(typeof(TicketDbContext))]
    partial class TicketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketSystem.API.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("AtananPersonelId")
                        .HasColumnType("integer");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Durum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MemnuniyetPuani")
                        .HasColumnType("integer");

                    b.Property<int>("MusteriId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OlusturmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Onem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SonGuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.TicketEk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Boyut")
                        .HasColumnType("bigint");

                    b.Property<string>("DosyaAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DosyaYolu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EklenmeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<string>("Uzanti")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketEkler");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.TicketTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<string>("Islem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("KullaniciId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketTimelines");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.TicketYorum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KullaniciId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<string>("Yorum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketYorumlar");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdSoyad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Aktif")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("KayitTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SifreHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.TicketEk", b =>
                {
                    b.HasOne("TicketSystem.API.Entities.Ticket", null)
                        .WithMany("Ekler")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.TicketTimeline", b =>
                {
                    b.HasOne("TicketSystem.API.Entities.Ticket", null)
                        .WithMany("Timeline")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketSystem.API.Entities.TicketYorum", b =>
                {
                    b.HasOne("TicketSystem.API.Entities.Ticket", null)
                        .WithMany("Yorumlar")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("TicketSystem.API.Entities.Ticket", b =>
                {
                    b.Navigation("Ekler");

                    b.Navigation("Timeline");

                    b.Navigation("Yorumlar");
                });
#pragma warning restore 612, 618
        }
    }
}
